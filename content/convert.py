import re
import os

def replace_figure_tags(content):
    """
    Thay th·∫ø c√°c th·∫ª {{<figure>}} th√†nh ƒë·ªãnh d·∫°ng markdown ![]()
    """
    # Pattern ƒë·ªÉ match th·∫ª figure v·ªõi c√°c thu·ªôc t√≠nh
    pattern = r'\{\{<\s*figure\s+src="([^"]+)"\s+alt="([^"]*)"\s+(?:width="[^"]*"\s*)?>\}\}'
    
    def replacement(match):
        src = match.group(1)
        alt = match.group(2)
        return f"![{alt}]({src})"
    
    # Thay th·∫ø t·∫•t c·∫£ c√°c matches
    result = re.sub(pattern, replacement, content)
    return result

def process_file(file_path):
    """
    X·ª≠ l√Ω m·ªôt file
    """
    try:
        # ƒê·ªçc n·ªôi dung file
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Thay th·∫ø
        new_content = replace_figure_tags(content)
        
        # Ghi l·∫°i file n·∫øu c√≥ thay ƒë·ªïi
        if new_content != content:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(new_content)
            print(f"‚úÖ ƒê√£ x·ª≠ l√Ω: {file_path}")
            return True
        else:
            print(f"‚è≠Ô∏è  Kh√¥ng c√≥ thay ƒë·ªïi: {file_path}")
            return False
            
    except Exception as e:
        print(f"‚ùå L·ªói khi x·ª≠ l√Ω {file_path}: {e}")
        return False

def process_directory(directory_path, file_extensions=None):
    """
    X·ª≠ l√Ω t·∫•t c·∫£ files trong th∆∞ m·ª•c
    """
    if file_extensions is None:
        file_extensions = ['.md', '.markdown', '.txt']
    
    processed_count = 0
    
    for root, dirs, files in os.walk(directory_path):
        for file in files:
            # Ki·ªÉm tra extension
            if any(file.lower().endswith(ext) for ext in file_extensions):
                file_path = os.path.join(root, file)
                if process_file(file_path):
                    processed_count += 1
    
    print(f"\nüéâ Ho√†n th√†nh! ƒê√£ x·ª≠ l√Ω {processed_count} files.")

def main():
    print("üîÑ Script thay th·∫ø Figure tags th√†nh Markdown images")
    print("=" * 50)
    
    # L·ª±a ch·ªçn ch·∫ø ƒë·ªô
    choice = input("Ch·ªçn ch·∫ø ƒë·ªô:\n1. X·ª≠ l√Ω 1 file\n2. X·ª≠ l√Ω th∆∞ m·ª•c\nNh·∫≠p l·ª±a ch·ªçn (1/2): ").strip()
    
    if choice == "1":
        # X·ª≠ l√Ω 1 file
        file_path = input("Nh·∫≠p ƒë∆∞·ªùng d·∫´n file: ").strip()
        if os.path.exists(file_path):
            process_file(file_path)
        else:
            print("‚ùå File kh√¥ng t·ªìn t·∫°i!")
            
    elif choice == "2":
        # X·ª≠ l√Ω th∆∞ m·ª•c
        dir_path = input("Nh·∫≠p ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c: ").strip()
        if not dir_path:
            dir_path = "."  # Th∆∞ m·ª•c hi·ªán t·∫°i
            
        if os.path.exists(dir_path):
            # T√πy ch·ªçn file extensions
            extensions_input = input("Nh·∫≠p c√°c extension c·∫ßn x·ª≠ l√Ω (m·∫∑c ƒë·ªãnh: .md,.markdown,.txt): ").strip()
            if extensions_input:
                extensions = [ext.strip() for ext in extensions_input.split(',')]
                if not all(ext.startswith('.') for ext in extensions):
                    # Th√™m d·∫•u . n·∫øu user qu√™n
                    extensions = ['.' + ext if not ext.startswith('.') else ext for ext in extensions]
            else:
                extensions = None
                
            process_directory(dir_path, extensions)
        else:
            print("‚ùå Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i!")
    else:
        print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")

# Test function ƒë·ªÉ demo
def test_replacement():
    """
    H√†m test ƒë·ªÉ xem k·∫øt qu·∫£ thay th·∫ø
    """
    test_content = '''
ƒê√¢y l√† n·ªôi dung test:

{{<figure src="/images/3.cloudfront/3.2-create-cloudfront/3.distribution-name.png" alt="Set distribution name" width="100%" >}}

{{<figure src="/images/test.jpg" alt="Test image" width="50%" >}}

{{<figure src="/path/to/image.png" alt="" width="100%" >}}
'''
    
    print("N·ªôi dung g·ªëc:")
    print(test_content)
    print("\n" + "="*50)
    print("N·ªôi dung sau khi thay th·∫ø:")
    print(replace_figure_tags(test_content))

if __name__ == "__main__":
    # Uncomment d√≤ng n√†y ƒë·ªÉ test
    # test_replacement()
    
    # Ch·∫°y ch∆∞∆°ng tr√¨nh ch√≠nh
    main()